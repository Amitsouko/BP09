<?php

namespace Bp\ProductBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

  public function findPagination($offset = 0, $limit = 20, $category, $brand)
  {
    $qb = $this->createQueryBuilder("p");
    $query = $qb//->addSelect("b.name") //->select("p.id, p.reference, p.name, p.description,p.specificite ,f.path, p.price, p.taxe, b.name as brand")
        ->leftJoin("p.mainPhoto", "f")
        ->leftJoin("p.brand", "b")
        ->leftJoin("p.categories", "c")
        ->where("p.active = :active")
        
        ->setFirstResult($offset)
        ->setMaxResults($limit);

      if($category && count($category) > 0)
      {
        $query->andWhere("c.name IN (:cat)")
        ->setParameter("cat", $category);
      }

      if($brand && count($brand) > 0 )
      {
        $query->andWhere("b.name IN (:brandName)")
        ->setParameter("brandName", $brand);
      }

      $query
        ->setParameter('active' , true)
        ->setFirstResult($offset)
        ->setMaxResults($limit);

      return $query->getQuery()->getResult();
  }

 
    public function findOneActiveById($id)
     {
         return $this->getEntityManager()
             ->createQuery('SELECT p FROM BpProductBundle:Product p
           
                             WHERE p.id = :id 
                             AND p.active = :active
                        ')
             ->setParameters(array(
                 'id' => $id,
                 'active' => true
             ))
             ->getSingleResult();
     }

     public function findOneLikeRef($ref)
      {
          return $this->getEntityManager()
              ->createQuery('SELECT p FROM BpProductBundle:Product p
            
                              WHERE p.reference LIKE :ref
                         ')
              ->setParameters(array(
                  'ref' => "%$ref%"
              ))
              ->getResult();
      }

      public function findOnHome($limit = 5)
       {
           return $this->getEntityManager()
               ->createQuery('SELECT p FROM BpProductBundle:Product p
             
                               WHERE p.onHome = :onHome
                          ')
               ->setMaxResults($limit)
               ->setParameters(array(
                   'onHome' => true
               ))
               ->getResult();
       }
}
